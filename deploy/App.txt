<!DOCTYPE html>
<html>
<head>
    <title>Dependency Dashboard by Portfolio Item</title>
    <!--  (c) 2016 CA Technologies.  All Rights Reserved. -->
    <!--  Build Date: Thu Jun 23 2016 13:52:02 GMT-0700 (PDT) -->
    
    <script type="text/javascript">
        var APP_BUILD_DATE = "Thu Jun 23 2016 13:52:02 GMT-0700 (PDT)";
        var BUILDER = "jmartin";
        var CHECKSUM = 52388582227;
    </script>
    
    <script type="text/javascript" src="/apps/2.1/sdk.js"></script>

    <script type="text/javascript">
        Rally.onReady(function() {
             
Ext.define('TSUtilities', {
    singleton: true,
    
    loadLookbackRecords: function(config){
        var me = this,
            deferred = Ext.create('Deft.Deferred');

        var default_config = {
            fetch: ['ObjectID']
        };
        Ext.create('Rally.data.lookback.SnapshotStore', Ext.Object.merge(default_config,config)).load({
            callback : function(records, operation, successful) {
                if (successful){
                    deferred.resolve(records);
                } else {
                    deferred.reject('Problem loading: ' + operation.error.errors.join('. '));
                }
            }
        });
        return deferred.promise;
    },
    
    loadWsapiRecords: function(config,returnOperation){
        var deferred = Ext.create('Deft.Deferred');
        var me = this;
        var default_config = {
            model: 'Defect',
            fetch: ['ObjectID'],
            compact: false
        };
        Ext.create('Rally.data.wsapi.Store', Ext.Object.merge(default_config,config)).load({
            callback : function(records, operation, successful) {
                if (successful){
                    if ( returnOperation ) {
                        deferred.resolve(operation);
                    } else {
                        deferred.resolve(records);
                    }
                } else {
                    deferred.reject('Problem loading: ' + operation.error.errors.join('. '));
                }
            }
        });
        return deferred.promise;
    },
    
    loadWsapiRecordsWithParallelPages: function(config) {
        var deferred = Ext.create('Deft.Deferred'),
            me = this;
        
        var count_check_config = Ext.clone(config);
        count_check_config.limit = 1;
        count_check_config.pageSize = 1;
        
        this.loadWsapiRecords(count_check_config, true).then({
            success: function(operation) {
                
                config.pageSize = 200;
                config.limit = config.pageSize;
                var total = operation.resultSet.totalRecords;
                var page_count = Math.ceil(total/config.pageSize);
                    
                var promises = [];
                Ext.Array.each(_.range(1,page_count+1), function(page_index) {
                    var config_clone = Ext.clone(config);
                    config_clone.currentPage = page_index;
                    promises.push(function() {
                        var percentage = parseInt( page_index * 100 / page_count, 10);
                        Rally.getApp().setLoading("Loading time values (" + percentage + "%)");
                        return me.loadWsapiRecords(config_clone); 
                    });
                });
                CA.techservices.promise.ParallelThrottle.throttle(promises, 6, me).then({
                        success: function(results){
                            deferred.resolve( Ext.Array.flatten(results) );
                        },
                        failure: function(msg) {
                            deferred.reject(msg);
                        }
                });
            },
            failure: function(msg) {
                deferred.reject(msg);
            }
        });
        return deferred.promise;
    },
    
    getOidFromRef: function(ref) {
        var ref_array = ref.replace(/\.js$/,'').split(/\//);
        return ref_array[ref_array.length-1];
    },
    
    fetchFieldValues: function(record_type, field_name) {
        var deferred = Ext.create('Deft.Deferred');
        Rally.data.ModelFactory.getModel({
            type: record_type,
            success: function(model) {
                model.getField(field_name).getAllowedValueStore().load({
                    callback: function(allowed_values, operation, success) {
                        deferred.resolve(Ext.Array.map(allowed_values, function(allowed_value){
                            return allowed_value.get('StringValue');
                        }));
                    }
                });
            }
        });
        return deferred.promise;
    },
    
    fetchPortfolioItemTypes: function() {
        var config = {
            model: 'TypeDefinition', 
            fetch: ["TypePath","Ordinal","Name"],
            filters: [{property:'TypePath', operator:'contains', value:'PortfolioItem/'}],
            sorters: [{property:'Ordinal',direction:'ASC'}]
        };
        
        return TSUtilities.loadWsapiRecords(config);
    }
    
});
/**
 * A link that pops up a version dialog box
 */

Ext.define('Rally.technicalservices.InfoLink',{
    extend: 'Rally.ui.dialog.Dialog',
    alias: 'widget.tsinfolink',
    
    /**
     * @cfg {String} informationHtml
     * Additional text to be displayed on the popup dialog (for exmaple,
     * to add a description of the app's use or functionality)
     */
    informationHtml: null,
    
    /**
     * 
     * cfg {String} title
     * The title for the dialog box
     */
    title: "Build Information",
    
    defaults: { padding: 5, margin: 5 },

    closable: true,
     
    draggable: true,

    autoShow: true,
   
    width: 350,
    
    informationalConfig: null,
    
    items: [{xtype:'container', itemId:'information' }],
    
    initComponent: function() {
        var id = Ext.id(this);
        this.title =  "<span class='icon-help'> </span>" + this.title;
        this.callParent(arguments);
    },
    
    _generateChecksum: function(string){
        var chk = 0x12345678,
            i;
        string = string.replace(/var CHECKSUM = .*;/,"");
        string = string.replace(/var BUILDER = .*;/,"");
        string = string.replace(/\s/g,"");  //Remove all whitespace from the string.
       
        for (i = 0; i < string.length; i++) {
            chk += (string.charCodeAt(i) * i);
        }
   
        return chk;
    },
    
    _checkChecksum: function(container) {
        var deferred = Ext.create('Deft.Deferred');
        var me = this;
        
        Ext.Ajax.request({
            url: document.URL,
            params: {
                id: 1
            },
            success: function (response) {
                text = response.responseText;
                if ( CHECKSUM ) {
                    var stored_checksum = me._generateChecksum(text);
                    if ( CHECKSUM !== stored_checksum ) {
                        deferred.resolve(false);
                        return;
                    }
                }
                deferred.resolve(true);
            }
        });
        
        return deferred.promise;
    },
    
    _addToContainer: function(container){
        var config = Ext.apply({
            xtype:'container',
            height: 200,
            overflowY: true
        }, this.informationalConfig);
        
        container.add(config);
    },
    
    afterRender: function() {
        var app = Rally.getApp();
        
        if ( !Ext.isEmpty( this.informationalConfig ) ) {
            var container = this.down('#information');
            this._addToContainer(container);
            
        }
        
        if (! app.isExternal() ) {
            this._checkChecksum(app).then({
                scope: this,
                success: function(result){
                    if ( !result ) {
                        this.addDocked({
                            xtype:'container',
                            cls: 'build-info',
                            dock: 'bottom',
                            padding: 2,
                            html:'<span class="icon-warning"> </span>Checksums do not match'
                        });
                    }
                },
                failure: function(msg){
                    console.log("oops:",msg);
                }
            });
        } else {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                dock: 'bottom',
                html:'... Running externally'
            });
        }
        this.callParent(arguments);
    },
    
    beforeRender: function() {
        var me = this;
        this.callParent(arguments);

        if (this.informationHtml) {
            this.addDocked({
                xtype: 'component',
                componentCls: 'intro-panel',
                padding: 2,
                html: this.informationHtml,
                doc: 'top'
            });
        }
        
        this.addDocked({
            xtype:'container',
            cls: 'build-info',
            padding: 2,
            dock:'bottom',
            html:"This app was created by the CA AC Technical Services Team."
        });
        
        if ( APP_BUILD_DATE ) {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                dock: 'bottom',
                html: Ext.String.format("Build date/time: {0} ({1})",
                    APP_BUILD_DATE,
                    BUILDER)
            });
        }
    }
});

/*
 */
Ext.define('Rally.technicalservices.Logger',{
    constructor: function(config){
        Ext.apply(this,config);
    },
    log: function(args){
        var timestamp = "[ " + Ext.util.Format.date(new Date(), "Y-m-d H:i:s.u") + " ]";
        //var output_args = arguments;
        //output_args.unshift( [ "[ " + timestamp + " ]" ] );
        //output_args = Ext.Array.push(output_args,arguments);
        
        var output_args = [];
        output_args = Ext.Array.push(output_args,[timestamp]);
        output_args = Ext.Array.push(output_args, Ext.Array.slice(arguments,0));

        window.console && console.log.apply(console,output_args);
    }

});

Ext.define('recordHolder',{
    data: {},
    constructor: function(config) {
        Ext.apply(this, config);
    },
    
    get: function(field) {
        return this.data[field];
    }
});

Ext.define('Rally.technicalservices.FileUtilities', {
    singleton: true,
    logger: new Rally.technicalservices.Logger(),
    
    saveCSVToFile:function(csv,file_name,type_object){
        if (type_object === undefined){
            type_object = {type:'text/csv;charset=utf-8'};
        }
        this.saveAs(csv,file_name, type_object);
    },
    
    saveAs: function(textToWrite, fileName)
    {
        this.logger.log('saveAs:', fileName);
        
        if (Ext.isIE9m){
            Rally.ui.notify.Notifier.showWarning({message: "Export is not supported for IE9 and below."});
            return;
        }

        var textFileAsBlob = null;
        try {
            textFileAsBlob = new Blob([textToWrite], {type:'text/plain'});
        }
        catch(e){
            this.logger.log('Caught an error ', e);
            
            window.BlobBuilder = window.BlobBuilder ||
                        window.WebKitBlobBuilder ||
                    window.MozBlobBuilder ||
                    window.MSBlobBuilder;
            if (window.BlobBuilder ) { //&&  e.name === 'TypeError'){
                bb = new BlobBuilder();
                bb.append([textToWrite]);
                textFileAsBlob = bb.getBlob("text/plain");
            }

        }

        if (!textFileAsBlob){
            Rally.ui.notify.Notifier.showWarning({message: "Export is not supported for this browser."});
            return;
        }

        var fileNameToSaveAs = fileName;

        if (Ext.isIE10p){
            window.navigator.msSaveOrOpenBlob(textFileAsBlob,fileNameToSaveAs); // Now the user will have the option of clicking the Save button and the Open button.
            return;
        }

        var url = this.createObjectURL(textFileAsBlob);

        if (url){
            var downloadLink = document.createElement("a");
            if ("download" in downloadLink){
                downloadLink.download = fileNameToSaveAs;
            } else {
                //Open the file in a new tab
                downloadLink.target = "_blank";
            }

            downloadLink.innerHTML = "Download File";
            downloadLink.href = url;
            if (!Ext.isChrome){
                // Firefox requires the link to be added to the DOM
                // before it can be clicked.
                downloadLink.onclick = this.destroyClickedElement;
                downloadLink.style.display = "none";
                document.body.appendChild(downloadLink);
            }
            downloadLink.click();
        } else {
            Rally.ui.notify.Notifier.showError({message: "Export is not supported "});
        }

    },
    createObjectURL: function ( file ) {
        if ( window.webkitURL ) {
            return window.webkitURL.createObjectURL( file );
        } else if ( window.URL && window.URL.createObjectURL ) {
            return window.URL.createObjectURL( file );
        } else {
            return null;
        }
    },
    saveTextAsFile: function(textToWrite, fileName) {
        var textFileAsBlob = new Blob([textToWrite], {type:'text/plain'});
        var fileNameToSaveAs = fileName;

        var downloadLink = document.createElement("a");
        downloadLink.download = fileNameToSaveAs;
        downloadLink.innerHTML = "Download File";
        if (window.webkitURL != null)
        {
            // Chrome allows the link to be clicked
            // without actually adding it to the DOM.
            downloadLink.href = window.webkitURL.createObjectURL(textFileAsBlob);
        }
        else
        {
            // Firefox requires the link to be added to the DOM
            // before it can be clicked.
            downloadLink.href = window.URL.createObjectURL(textFileAsBlob);
            downloadLink.onclick = destroyClickedElement;
            downloadLink.style.display = "none";
            document.body.appendChild(downloadLink);
        }
        downloadLink.click();
    },
    destroyClickedElement: function(event)
    {
        document.body.removeChild(event.target);
    },
    convertDataArrayToCSVText: function(data_array, requestedFieldHash){
       
        var text = '';
        Ext.each(Object.keys(requestedFieldHash), function(key){
            text += requestedFieldHash[key] + ',';
        });
        text = text.replace(/,$/,'\n');
        
        Ext.each(data_array, function(d){
            Ext.each(Object.keys(requestedFieldHash), function(key){
                if (d[key]){
                    if (typeof d[key] === 'object'){
                        if (d[key].FormattedID) {
                            text += Ext.String.format("\"{0}\",",d[key].FormattedID ); 
                        } else if (d[key].Name) {
                            text += Ext.String.format("\"{0}\",",d[key].Name );                    
                        } else if (!isNaN(Date.parse(d[key]))){
                            text += Ext.String.format("\"{0}\",",Rally.util.DateTime.formatWithDefaultDateTime(d[key]));
                        }else {
                            text += Ext.String.format("\"{0}\",",d[key].toString());
                        }
                    } else {
                        text += Ext.String.format("\"{0}\",",d[key] );                    
                    }
                } else {
                    text += ',';
                }
            },this);
            text = text.replace(/,$/,'\n');
        },this);
        return text;
    },
    _getCSVFromWsapiBackedGrid: function(grid,skip_headers) {
        var deferred = Ext.create('Deft.Deferred');
        var store = Ext.create('Rally.data.wsapi.Store',{
            fetch: grid.getStore().config.fetch,
            filters: grid.getStore().config.filters,
            model: grid.getStore().config.model,
            pageSize: 200
        });
        
        var columns = grid.columns;
        
        var record_count = grid.getStore().getTotalCount(),
            page_size = grid.getStore().pageSize,
            pages = Math.ceil(record_count/page_size),
            promises = [];

        for (var page = 1; page <= pages; page ++ ) {
            promises.push(this.loadStorePage(grid, store, columns, page, pages));
        }
        Deft.Promise.all(promises).then({
            success: function(csvs){
                var csv = [];
                if ( !skip_headers ) {
                    csv.push('"' + this._getHeadersFromGrid(grid).join('","') + '"');
                }
                _.each(csvs, function(c){
                    _.each(c, function(line){
                        csv.push(line);
                    });
                });
                csv = csv.join('\r\n');
                deferred.resolve(csv);
                Rally.getApp().setLoading(false);
            }
        });
        return deferred.promise;
    },
    
    getCSVFromRows: function(scope, grid, rows) {
        var me = this;
        var columns = grid.columns;
        var store = grid.getStore();
        
        console.log('getCSVFromRows', grid, columns, store);
        
        var csv = [];
        
        csv.push('"' + this._getHeadersFromGrid(grid).join('","') + '"');
        
        Ext.Array.each(rows,function(row){
            
            csv.push( me._getCSVFromRecord(Ext.create('recordHolder', { data:row}), grid, store) );
        });
        
        csv = csv.join('\r\n');
        return csv;
    },
    
    // custom grid assumes there store is fully loaded
    _getCSVFromCustomBackedGrid: function(grid, skip_headers) {
        var deferred = Ext.create('Deft.Deferred');
        var store = Ext.clone( grid.getStore() );
        var columns = grid.columns;
        Rally.getApp().setLoading("Generating CSV...");
        
        var record_count = store.getTotalCount(),
            page_size = store.pageSize,
            pages = Math.ceil(record_count/page_size),
            promises = [];

        for (var page = 1; page <= pages; page ++ ) {
            promises.push(this.loadStorePage(grid, store, columns, page, pages));
        }
        
        Deft.Promise.all(promises).then({
            scope: this,
            success: function(csvs){
                var csv = [];
                if ( !skip_headers ) {
                    csv.push('"' + this._getHeadersFromGrid(grid).join('","') + '"');
                }
                _.each(csvs, function(c){
                    _.each(c, function(line){
                        csv.push(line);
                    });
                });
                csv = csv.join('\r\n');
                deferred.resolve(csv);
                Rally.getApp().setLoading(false);
            }
        });
        return deferred.promise;
    },
    
    _getHeadersFromGrid: function(grid) {
        var headers = [];        
        var columns = grid.columns;

        Ext.Array.each(columns,function(column){
            if ( column.hidden ) { return; }
            
            if ( column.dataIndex || column.renderer ) {
                if ( column.csvText ) {
                    headers.push(column.csvText.replace('&nbsp;',' '));
                } else if ( column.text )  {
                    headers.push(column.text.replace('&nbsp;',' '));
                }
            }
        });
        
        return headers;
    },
    
    _getColumnNamesFromGrid: function(grid) {
        var names = [];
        var columns = grid.columns;

        Ext.Array.each(columns,function(column){
            if ( column.dataIndex || column.renderer ) {
                names.push(column.dataIndex);
            }
        });
        
        return names;
    },
    /*
     * will render using your grid renderer.  If you want it to ignore the grid renderer, 
     * have the column set _csvIgnoreRender: true
     */
    getCSVFromGrid:function(app, grid, skip_headers){
        this.logger.log("Exporting grid with store type:", Ext.getClassName(grid.getStore()));
        
        if ( Ext.getClassName(grid.getStore()) != "Rally.data.custom.Store" ) {
            return this._getCSVFromWsapiBackedGrid(grid,skip_headers);
        }
        
        return this._getCSVFromCustomBackedGrid(grid,skip_headers);
    },
    loadStorePage: function(grid, store, columns, page, total_pages){
        var deferred = Ext.create('Deft.Deferred');
        this.logger.log('loadStorePage',page, total_pages);

        store.loadPage(page, {
            callback: function (records) {
                var csv = [];
                Rally.getApp().setLoading(Ext.String.format('Page {0} of {1} loaded',page, total_pages));
                for (var i = 0; i < records.length; i++) {
                    var record = records[i];
                    csv.push( this._getCSVFromRecord(record, grid, store) );
                }
                deferred.resolve(csv);
            },
            scope: this
        });
        return deferred;
    },
    
    _getCSVFromRecord: function(record, grid, store) {
        //console.log('record:', record);
        
        var mock_meta_data = {
            align: "right",
            classes: [],
            cellIndex: 9,
            column: null,
            columnIndex: 9,
            innerCls: undefined,
            recordIndex: 5,
            rowIndex: 5,
            style: "",
            tdAttr: "",
            tdCls: "x-grid-cell x-grid-td x-grid-cell-headerId-gridcolumn-1029 x-grid-cell-last x-unselectable",
            unselectableAttr: "unselectable='on'"
        };
        
        var node_values = [];
        var columns = grid.columns;
        
        Ext.Array.each(columns, function (column) {
            if (column.xtype == 'rallyrowactioncolumn'  || column.xtype == 'tsrowactioncolumn') {
                return;
            }
            
            if ( column.hidden ) {
                return;
            }
            
            if (column.dataIndex) {
                var column_name = column.dataIndex;
                
                var display_value = record.get(column_name);

                if (!column._csvIgnoreRender && ( column.renderer || column.exportRenderer) ) {
                    if (column.exportRenderer) {
                        display_value = column.exportRenderer(display_value, mock_meta_data, record, 0, 0, store, grid.getView());
                    } else {
                        display_value = column.renderer(display_value, mock_meta_data, record, 0, 0, store, grid.getView());
                    }
                }
                node_values.push(display_value);
            } else {
                var display_value = null;
                if (!column._csvIgnoreRender && column.renderer) {
                    if (column.exportRenderer) {
                        display_value = column.exportRenderer(display_value, mock_meta_data, record, record, 0, 0, store, grid.getView());
                    } else {
                        display_value = column.renderer(display_value, mock_meta_data, record, record, 0, 0, store, grid.getView());
                    }
                    node_values.push(display_value);
                }
            }
        }, this);
        
        var csv_string = "";
        Ext.Array.each(node_values, function(node_value,idx){
            if ( idx > 0 ) {
                csv_string = csv_string + ",";
            }
            if (/^=/.test(node_value) ) {
                csv_string = csv_string + node_value;
            } else {
                csv_string = csv_string + '"' + node_value + '"';
            }

        });
        
        return csv_string;
    }

});
Ext.define('Rally.technicalservices.dependency.Settings', {
    singleton: true,

    getFields: function(config) {
        
        var items = [];
        
        items.push({
            name: 'parentRecordType',
            xtype: 'rallyportfolioitemtypecombobox',
            margin: '10px 0 0 0',
            fieldLabel: 'Record Type for Query',
            readyEvent: 'ready' 
        });
        
        items.push({
            xtype: 'textarea',
            fieldLabel: 'Query',
            name: 'parentQuery',
            anchor: '100%',
            cls: 'query-field',
            margin: '0 70 0 0',
            plugins: [
                {
                    ptype: 'rallyhelpfield',
                    helpId: 194
                },
                'rallyfieldvalidationui'
            ],
            validateOnBlur: false,
            validateOnChange: false,
            validator: function(value) {
                try {
                    if (value) {
                        Rally.data.wsapi.Filter.fromQueryString(value);
                    }
                    return true;
                } catch (e) {
                    return e.message;
                }
            }
        });
        
        return items;
    }
});
Ext.define("TSDependencyByPI", {
    extend: 'Rally.app.App',
    componentCls: 'app',
    logger: new Rally.technicalservices.Logger(),
    defaults: { margin: 10 },
    
    stories: [],
    allowedStates: [],
    rows: [],
    
    
    items: [
        {xtype:'container',itemId:'display_box', overflowY: 'auto', layout: 'column'}
    ],

    integrationHeaders : {
        name : "TSDependencyByPI"
    },
    
    config: {
        defaultSettings: {
            parentRecordType: null,
            parentQuery: '( ObjectID > 0 )'
        }
    },
    
    launch: function() {
        var me = this;
        if ( Ext.isEmpty( this.getSetting('parentRecordType') ) || Ext.isEmpty( this.getSetting('parentQuery') ) ) {
            Ext.Msg.alert("","Please use the Edit App Settings gear menu item to choose an ancestor record type and query");
            return;
        }
        
        this.setLoading("Fetching base information...");
        
        TSUtilities.fetchFieldValues('HierarchicalRequirement','ScheduleState').then({
            scope: this,
            success: function(states) {
                this.allowedStates = states;
                this.logger.log("Allowed States: ", this.allowedStates);
                
                TSUtilities.fetchPortfolioItemTypes().then({
                    scope: this,
                    success: function(results) {
                        this.pi_types = results;
                        this._updateData();
                    }
                });
            }
        }).always(function() { me.setLoading(false); });
        
    },

    _updateData: function() {
        var me = this;
        this.stories = [];
        this.down('#display_box').removeAll();
        
        this.setLoading("Fetching data...");

        Deft.Chain.pipeline([
            me._getPortfolioItems,
            me._getDescendantStoriesWithDependencies,
            me._getAscendantPIs
        ],this).then({
            scope: this,
            success: function(stories){
                
                var iterations = this._collectByIteration(stories);
                
                this._makeIterationBoxes(iterations);
            },
            failure: function(msg) {
                Ext.Msg.alert('',msg);
            }
        }).always(function() { me.setLoading(false); });
    },
    
    _getPortfolioItems: function() {
        this.setLoading('Fetching items that match the query...');
        
        var filters = Rally.data.wsapi.Filter.fromQueryString(this.getSetting('parentQuery'));
        var model = this._getPITypePathFromTypeDef(this.getSetting('parentRecordType'));
                
        var config = {
            model: model,
            filters: filters,
            fetch: ['ObjectID','FormattedID']
        };
        
        return TSUtilities.loadWsapiRecords(config);
        
    },
    
    _getDescendantStoriesWithDependencies: function(portfolio_items) {
        this.setLoading('Fetching stories...');

        if ( portfolio_items.length === 0 ) {
            this.down('#display_box').add({xtype:'container',html:'No items found'});
            return;
        }
        var me = this,
            deferred = Ext.create('Deft.Deferred'),
            ascendant_ordinal = null,
            oid = TSUtilities.getOidFromRef(this.getSetting('parentRecordType'));
       
        Ext.Array.each(this.pi_types, function(pi_type){
            if ( "" + pi_type.get('ObjectID') == "" + oid ) {
                ascendant_ordinal = pi_type.get('Ordinal');
            }
        });
                
        var lowest_level_pi_name = this.pi_types[0].get('Name');
        var field_prefix = lowest_level_pi_name;

        for ( var i=1; i<=ascendant_ordinal; i++ ) {
            field_prefix = field_prefix + ".Parent";
        }
        
        var pi_filter_array = Ext.Array.map(portfolio_items, function(pi){
            return { property:field_prefix + '.ObjectID',value:pi.get('ObjectID') };
        });
        
        var pi_filters = Rally.data.wsapi.Filter.or(pi_filter_array);
        var dependency_filter = Rally.data.wsapi.Filter.or([
            { property:'Predecessors.ObjectID',operator:'>',value:0 },
            { property:'Successors.ObjectID',operator:'>',value:0 }
        ]);
        
        var filters = dependency_filter.and(pi_filters);
        
        var config = {
            model: 'UserStory',
            fetch: ['ObjectID','FormattedID','Name','Predecessors','Successors','Iteration','ScheduleState','ScheduleStatePrefix','Blocked',
                'StartDate', 'EndDate', 'Project',lowest_level_pi_name,'Parent'],
            filters: filters,
            limit: Infinity,
            context: {
                project: null
            }
        };
        
        TSUtilities.loadWsapiRecords(config).then({
            scope: this,
            success: function(stories) {
                if ( stories.length === 0 ) {
                    deferred.resolve([]);
                    return;
                }
                
                this.setLoading('Fetching dependency information...');
                
                var promises = [];
                
                Ext.Array.each(stories, function(story){
                    promises.push(function() { return me._fetchPredecessorsFor(story); });
                    promises.push(function() { return me._fetchSuccessorsFor(story); });
                }, me);
                
                Deft.Chain.sequence(promises).then({
                    success: function(results) {
                        deferred.resolve( Ext.Array.unique(stories) );
                    },
                    failure: function(msg) {
                        deferred.reject(msg);
                    }
                }).always(function(){ me.setLoading(false); });
                
            },
            failure: function(msg) {
                deferred.reject(msg);
            }
        });
        
        return deferred.promise;
        
    },
    
    _getAscendantPIs: function(stories) {
        this.logger.log('_getAscendantPIs',stories);
        var deferred = Ext.create('Deft.Deferred');
        
        if ( Ext.isEmpty(stories) || stories.length === 0 ) {
            return stories;
        }
        this.setLoading('Fetch Hierarchy...');
        
        var stories_by_oid = {};
        Ext.Array.each(stories, function(story){
            stories_by_oid[parseInt(story.get('ObjectID'),10)] = story;
        });
        
        //lookback isn't working tonight
        var lowest_level_pi_name = this.pi_types[0].get('Name');
        var grandparent_filters = Ext.Array.map(stories, function(story){
            var parent = story.get(lowest_level_pi_name).Parent;
            story.set('__Parent', story.get(lowest_level_pi_name));
            
            if ( parent ) {
                story.set('__Grandparent',parent);
                return {property:'ObjectID',value:parent.ObjectID};
            }
            return {property:'ObjectID',value:-1};
        });
        
        var unique_grandparent_filters = Ext.Array.unique(grandparent_filters);
        
        var filters = Rally.data.wsapi.Filter.or(unique_grandparent_filters);
        
        var config = {
            model: this.pi_types[1].get('TypePath'),
            limit: Infinity,
            filters: filters,
            fetch: ['FormattedID','Name','Parent']
        };
        
        TSUtilities.loadWsapiRecords(config).then({
            success: function(grandparents) {
                console.log('grandparents', grandparents);
                var grandparents_by_oid = {};
                Ext.Array.each(grandparents, function(grandparent){
                    grandparents_by_oid[grandparent.get('ObjectID')] = grandparent;
                });
                
                Ext.Array.each(stories, function(story){
                    var grandparent = story.get('__Grandparent');
                    if ( grandparent ) {
                        var grandparent_oid = grandparent.ObjectID;
                        if (grandparents_by_oid[grandparent_oid] && grandparents_by_oid[grandparent_oid].get('Parent')) {
                            story.set('__Greatgrandparent',grandparents_by_oid[grandparent_oid].get('Parent'));
                        }
                    }
                });
                
                deferred.resolve(stories);
            },
            failure: function(msg) {
                deferred.reject(msg);
            }
        });
        
        return deferred.promise;
    },
    
    _getHierarchyListFromLookback: function(stories_by_oid) {
        var deferred = Ext.create('Deft.Deferred');
        oids = Ext.Object.getKeys(stories_by_oid);
        
        var config = {
            fetch: ['_ItemHierarchy','ObjectID'],
            filters: [
                {property:'ObjectID',operator:'in',value:oids},
                {property:'__At',value:'current'}
            ]
        };
        
        console.log(config);
        
//        TSUtilities.loadLookbackRecords().then({
//            success: function(snapshots){
//                Ext.Array.each(snapshots, function(snapshot){
//                    var oid = snapshot.get('ObjectID');
//                    stories_by_oid[oid].set('_ItemHierarchy', snapshot.get('_ItemHierarchy'));
//                });
//                
//                deferred.resolve(stories_by_oid);
//            },
//            failure: function(msg) {
//                deferred.reject(msg);
//            }
//            
//        });
        
        return deferred.promise;
    },
    
    _fetchPredecessorsFor: function(story) {
        var deferred = Ext.create('Deft.Deferred');
        
        story.getCollection('Predecessors').load({
            fetch: ['FormattedID', 'Name', 'ScheduleState','ScheduleStatePrefix','Iteration','Blocked',
                'StartDate','EndDate','Project'],
            callback: function(records, operation, success) {
                story.set('__Predecessors', records);
                deferred.resolve(story);
            }
        });

        return deferred.promise;
    },
    
    _fetchSuccessorsFor: function(story) {
        var deferred = Ext.create('Deft.Deferred');

        story.getCollection('Successors').load({
            fetch: ['FormattedID', 'Name', 'ScheduleState','ScheduleStatePrefix','Iteration','Blocked',
                'StartDate','EndDate','Project'],
            callback: function(records, operation, success) {
                story.set('__Successors', records);
                deferred.resolve(story);
            }
        });

        return deferred.promise;
    },
    
    _collectByIteration: function(stories) {
        var stories_by_iteration = {};
        Ext.Array.each(stories, function(story){
            
            var iteration = story.get('Iteration') || { 
                StartDate: null,
                EndDate: null,
                Name: "Unscheduled"
            };
            
            var iteration_start = iteration.StartDate;
            if ( Ext.isEmpty(stories_by_iteration[iteration_start]) ) {
                stories_by_iteration[iteration_start] = {
                    iteration: iteration,
                    stories: []
                };
            }
            
            stories_by_iteration[iteration_start].stories.push(story);
        });
        
        return stories_by_iteration;
    },
    
    _makeIterationBoxes: function(iterations) {
        this.logger.log('iterations', iterations);
        var container = this.down('#display_box');
        
        var iteration_dates_in_order = Ext.Object.getKeys(iterations).sort();
        
        Ext.Array.each(iteration_dates_in_order, function(iteration_date) {
            var iteration_object = iterations[iteration_date];
            this._addIterationBox(container,iteration_object);
        },this);
        
    },
    
    _addIterationBox: function(container,iteration_object) {
        var me = this;
        var iteration = iteration_object.iteration;
        var stories = iteration_object.stories;
        
        var box = container.add({
            xtype:'container',
            border: 1,
            style: {borderColor:'#000000', borderStyle:'solid', borderWidth:'1px'},
            padding: 5,
            margin: 10,
            width: 525,
            height: 400,
            overflowY: 'auto'
        });
        
        var iteration_start = iteration.StartDate || "--";
        var iteration_end = iteration.EndDate || "--";
        
        var iteration_date_string = Ext.String.format("{0} to {1}",
            iteration_start.replace(/T.*$/,''),
            iteration_end.replace(/T.*$/,'')
        );
        
        if ( iteration_start == "--" ) {
            iteration_date_string = "--";
        }
        
        var header = box.add({
            xtype:'container',
            html: Ext.String.format("<span class='iteration-header'>{0}</span><br/>{1}",
                iteration.Name,
                iteration_date_string
            )
        });
        
        var summary = box.add({
            xtype:'container'
        });
        
        Ext.Array.each(stories, function(story){
            var hierarchy_string = "";
            
            var level = "__Parent";
            if ( story.get(level) ) {
                hierarchy_string = Ext.String.format("<a href='{0}' target='_top'>{1}</a>: {2}",
                    Rally.nav.Manager.getDetailUrl(story.get(level)),
                    story.get(level).FormattedID,
                    story.get(level).Name
                );
            }
            
            var level = "__Grandparent";
            if ( story.get(level) ) {
                hierarchy_string = hierarchy_string + " <br/> " + Ext.String.format("<a href='{0}' target='_top'>{1}</a>: {2}",
                    Rally.nav.Manager.getDetailUrl(story.get(level)),
                    story.get(level).FormattedID,
                    story.get(level).Name
                );
            }
            
            var level = "__Greatgrandparent";
            if ( story.get(level) ) {
                hierarchy_string = hierarchy_string + " <br/> " + Ext.String.format("<a href='{0}' target='_top'>{1}</a>: {2}",
                    Rally.nav.Manager.getDetailUrl(story.get(level)),
                    story.get(level).FormattedID,
                    story.get(level).Name
                );
            }
            
            var state_string = story.get('ScheduleState');
            var schedule_state_box = Ext.String.format("<span class='state-legend-grey'>{0}</span>",
                    story.get('ScheduleStatePrefix')
                );
            summary.add({
                xtype:'container',
                cls: 'story-header',
                html: Ext.String.format("<hr/>{0}<br/><a href='{1}' target='_top'>{2}</a>: {3} {4}<br/><div style='padding: 1px 1px 1px 10px'>{5}</div>",
                    story.get('Project')._refObjectName,
                    Rally.nav.Manager.getDetailUrl(story),
                    story.get('FormattedID'),
                    schedule_state_box,
                    story.get("_refObjectName"),
                    hierarchy_string
                )
            });
            
            
            Ext.Array.each(story.get('__Predecessors'), function(predecessor){
                
                var schedule_state = predecessor.get('ScheduleState');
                var state_color = 'state-legend-red';
                if ( schedule_state == 'Completed' || schedule_state == 'In-Progress' ) {
                    state_color = 'state-legend-yellow';
                }
                
                if ( me._isAccepted(predecessor) ) {
                    state_color = 'state-legend-green';
                }
                
                var schedule_state_box = Ext.String.format("<div class='state-legend {0}'>{1}</div>",
                    state_color,
                    predecessor.get('ScheduleStatePrefix')
                );
                
                var status_flag = true;
                var status_message = "Not yet scheduled";
               
                if ( !Ext.isEmpty(predecessor.get('Iteration') ) ) {
                    var story_end = iteration.EndDate;
                    var dependency_end = predecessor.get('Iteration').EndDate;

                    status_message = "Scheduled for " + predecessor.get('Iteration')._refObjectName;
                    
                    if ( dependency_end >= story_end && !Ext.isEmpty(story_end) ) {
                        status_flag = true;
                    } else { 
                        status_flag = false;
                    }
                    
                }
                
                if ( me._isAccepted(predecessor) ) {
                    status_flag = false;
                }
                
                if ( status_flag ) {
                    var warning_flag = "<img src='/slm/images/icon_alert_sm.gif' alt='Warning' title='Warning'>";
                    status_message = warning_flag + " " + status_message;
                }
                
                summary.add({
                    xtype:'container',
                    margin: '2 2 5 10',
                    html: Ext.String.format("Waiting on <b>{0}</b> for <br/>{1} <a href='{2}' target='_top'>{3}</a>:{4}",
                        predecessor.get('Project')._refObjectName,
                        schedule_state_box,
                        Rally.nav.Manager.getDetailUrl(predecessor),
                        predecessor.get('FormattedID'),
                        predecessor.get('Name')
                    )
                });
                
                summary.add({
                    xtype:'container',
                    margin: '2 2 5 30',
                    html: status_message
                });
                
                me.rows.push({
                    Iteration: iteration,
                    Story: story,
                    Type: 'Waiting on',
                    Target: predecessor
                });
                
            });

            if ( !Ext.isEmpty(story.get("__Predecessors")) && story.get("__Predecessors").length > 0 &&
                !Ext.isEmpty(story.get("__Successors")) && story.get("__Successors").length > 0  ) {
                    summary.add({ xtype:'container', html: "<hr style='border-top: 1px dotted #8c8b8b;'/>" });
            }

            Ext.Array.each(story.get('__Successors'), function(successor){
                
                var schedule_state = successor.get('ScheduleState');
                var state_color = 'state-legend-red';
                if ( schedule_state == 'Completed' || schedule_state == 'In-Progress' ) {
                    state_color = 'state-legend-yellow';
                }
                
                if ( me._isAccepted(successor) ) {
                    state_color = 'state-legend-green';
                }
                
                var schedule_state_box = Ext.String.format("<div class='state-legend {0}'>{1}</div>",
                    state_color,
                    successor.get('ScheduleStatePrefix')
                );
                
                var status_flag = true;
                var status_message = "Not yet scheduled"; 
                
                if ( !Ext.isEmpty(successor.get('Iteration') ) ) {
                    var story_end = iteration.EndDate;
                    var dependency_end = successor.get('Iteration').EndDate;
                                        
                    status_message = "Scheduled for " + successor.get('Iteration')._refObjectName;

                    if ( dependency_end >= story_end && !Ext.isEmpty(story_end) ) {
                        status_flag = true;
                    } else { 
                        status_flag = false;
                    }
                    
                }
               
                if ( me._isAccepted(successor) ) {
                    status_flag = false;
                }
                
                if ( status_flag ) {
                    var warning_flag = "<img src='/slm/images/icon_alert_sm.gif' alt='Warning' title='Warning'>";
                    status_message = warning_flag + " " + status_message;
                }
                
                summary.add({
                    xtype:'container',
                    margin: '2 2 5 10',
                    html: Ext.String.format("Needed by <b>{0}</b> for <br/>{1} <a href='{2}' target='_top'>{3}</a>:{4}",
                        successor.get('Project')._refObjectName,
                        schedule_state_box,
                        Rally.nav.Manager.getDetailUrl(successor),
                        successor.get('FormattedID'),
                        successor.get('Name')
                    )
                });
                
                summary.add({
                    xtype:'container',
                    margin: '2 2 5 30',
                    html: status_message
                });
                
                
                me.rows.push({
                    Iteration: iteration,
                    Story: story,
                    Type: 'Needed by',
                    Target: successor
                });
                
            });
            
        });
            
    },
    
    _isAccepted: function(item) {
        return (Ext.Array.indexOf(this.allowedStates,'Accepted') <= Ext.Array.indexOf(this.allowedStates,item.get('ScheduleState')) );
    },
    
    /*
     * type def looks like "/typedefinition/1324342"
     */
    _getPITypePathFromTypeDef: function(typedef) {
        var oid = TSUtilities.getOidFromRef(typedef);
        
        var model = "PortfolioItem";
        Ext.Array.each(this.pi_types, function(type){
            if ( "" + type.get('ObjectID') == "" + oid ) {
                model = type.get('TypePath');
            }
        });
        return model;
    },
    
    _getExportColumns: function() {
        return [
            {
                dataIndex: 'Iteration',
                text: 'Iteration',
                renderer: function(value,meta,record) { 
                    if ( Ext.isEmpty(value) || Ext.isEmpty(value._refObjectName) ) { return "Unscheduled"; }
                    return value._refObjectName;
                }
            },
            { 
                dataIndex: 'Story',
                text: 'Story ID',
                renderer: function(value, meta, record) {
                    if ( Ext.isEmpty(value) || !Ext.isFunction(value.get) ) { return ""; }
                    return value.get('FormattedID');
                }
            },
            { 
                dataIndex: 'Story',
                text: 'Story Name',
                renderer: function(value, meta, record) {
                    if ( Ext.isEmpty(value) || !Ext.isFunction(value.get) ) { return ""; }
                    return value.get('Name');
                }
            },
            { 
                dataIndex: 'Story',
                text: 'Schedule State',
                renderer: function(value, meta, record) {
                    if ( Ext.isEmpty(value) || !Ext.isFunction(value.get) ) { return ""; }
                    return value.get('ScheduleState');
                }
            },
            { 
                dataIndex: 'Story',
                text: 'Team',
                renderer: function(value, meta, record) {
                    if ( Ext.isEmpty(value) || !Ext.isFunction(value.get) ) { return ""; }
                    var iteration = value.get('Project');
                    if ( Ext.isEmpty(iteration) || Ext.isEmpty(iteration._refObjectName) ) { return ""; }
                    return value.get('Project')._refObjectName;
                }
            },
            { 
                dataIndex: 'Type',
                text: 'Direction'
            },
            { 
                dataIndex: 'Target',
                text: 'Target Story ID',
                renderer: function(value, meta, record) {
                    if ( Ext.isEmpty(value) || !Ext.isFunction(value.get) ) { return ""; }
                    return value.get('FormattedID');
                }
            },
            { 
                dataIndex: 'Target',
                text: 'Target Story Name',
                renderer: function(value, meta, record) {
                    if ( Ext.isEmpty(value) || !Ext.isFunction(value.get) ) { return ""; }
                    return value.get('Name');
                }
            },
            { 
                dataIndex: 'Target',
                text: 'Target Schedule State',
                renderer: function(value, meta, record) {
                    if ( Ext.isEmpty(value) || !Ext.isFunction(value.get) ) { return ""; }
                    console.log('...', record);
                    return value.get('ScheduleState');
                }
            },
            { 
                dataIndex: 'Target',
                text: 'Target Iteration',
                renderer: function(value, meta, record) {
                    if ( Ext.isEmpty(value) || !Ext.isFunction(value.get) ) { return "Unscheduled"; }
                    var iteration = value.get('Iteration');
                    if ( Ext.isEmpty(iteration) || Ext.isEmpty(iteration._refObjectName) ) { return "Unscheduled"; }
                    return value.get('Iteration')._refObjectName;
                }
            },
            { 
                dataIndex: 'Target',
                text: 'Target Team',
                renderer: function(value, meta, record) {
                    if ( Ext.isEmpty(value) || !Ext.isFunction(value.get) ) { return ""; }
                    var iteration = value.get('Project');
                    if ( Ext.isEmpty(iteration) || Ext.isEmpty(iteration._refObjectName) ) { return ""; }
                    return value.get('Project')._refObjectName;
                }
            }
        ];
    },
    
    _export: function(){
        var me = this;
        this.logger.log('_export');
        
        var rows = this.rows;
        
        var grid = Ext.create('Rally.ui.grid.Grid',{
            store: Ext.create('Rally.data.custom.Store',{ data: rows}),
            columnCfgs: this._getExportColumns()
        });
        
        this.logger.log('rows:', rows.length, rows);
        
        var filename = 'dependency-report.csv';

        this.logger.log('saving file:', filename);
        
        this.setLoading("Generating CSV");
        Deft.Chain.sequence([
            function() { return Rally.technicalservices.FileUtilities.getCSVFromRows(this,grid,rows); } 
        ]).then({
            scope: this,
            success: function(csv){
                this.logger.log('got back csv ', csv.length);
                if (csv && csv.length > 0){
                    Rally.technicalservices.FileUtilities.saveCSVToFile(csv,filename);
                } else {
                    Rally.ui.notify.Notifier.showWarning({message: 'No data to export'});
                }
                
            }
        }).always(function() { me.setLoading(false); });
    },
    
    getOptions: function() {
        return [
            { 
                text: 'Export',
                handler: this._export,
                scope: this
            },
            {
                text: 'About...',
                handler: this._launchInfo,
                scope: this
            }
        ];
    },
    
    _launchInfo: function() {
        if ( this.about_dialog ) { this.about_dialog.destroy(); }
        this.about_dialog = Ext.create('Rally.technicalservices.InfoLink',{});
    },
    
    isExternal: function(){
        return typeof(this.getAppId()) == 'undefined';
    },
    
    getSettingsFields: function() {
        return Rally.technicalservices.dependency.Settings.getFields();
    }
});

            
               Rally.launchApp('TSDependencyByPI', {
                   name: 'Dependency Dashboard by Portfolio Item'
               });
        });
    </script>
    
    <style type="text/css">

.app {
}
.tsinfolink {
    position:absolute;
    right:0px;
    width: 14px;
    height: 14px;
    border-radius: 7px;
    text-align: center;
    color: white;
    background: #C0C0C0;
    border-style: solid;
    border-width: 1px;
    margin-top: 25px;
    margin-right: 5px;
    cursor: pointer;
}

.state-legend {
    background: #006600 none repeat scroll 0%;
    border: 1px solid #DDDDDD;
    color: #FFFFFF;
    cursor: default;
    float: left;
    height: 18px;
    line-height: 18px;
    margin-right: 2px;
    text-align: center;
    width: 18px;
}

.story-header {
    font: bold 11px Arial, sans-serif;
}

.iteration-header{
    font: bold 14px Arial, sans-serif;
}

.state-legend-red {
    background-color: red !important;
}

.state-legend-yellow {
    background-color: yellow !important;
    color: black;
}

.state-legend-green {
    background-color: green !important;
}

span.state-legend-grey {
    padding: 1px 3px 2px 3px;
    color: black;
    background-color: #DCDCDC !important;
}


    </style>

</head>
<body></body>
</html>